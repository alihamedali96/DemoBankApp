/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.example.demo.AppUser;

import com.example.demo.Accounts.Accounts;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.SequenceGenerator;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
//create-drop is why the database keeps renewing and not saving data
@Getter
@Setter
@EqualsAndHashCode
@NoArgsConstructor
@Entity //creates this class in db
public class AppUser implements UserDetails {
    
    
    @SequenceGenerator( //this lets us define the name of the generator and so on...
            name="User_sequence", //name can be accessed by one or more classes to generate primary key values
            sequenceName="User_sequence", // The name of the database sequence object from which to obtain primary key values.
            allocationSize =1
            //To minimize round trips to the database server, IDs are allocated in groups.
            //The number of IDs in each allocation is specified by the allocationSize attribute.On the application side, ids for an entities instances will always increase by 1 unless we reach the allocationSize limit. 
            //After 'allocationSize' is reached, the next id will be retrieved from the database sequence again.
        
            )
    @Id //this makes the long id be primary key
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "User_sequence") //autogenerated primary key
    private long id;
    
    private String firstName;
    private String lastName;
    private String password;
    private String email;
    
    @Enumerated(EnumType.STRING)
    private AppUserRole appUserRole;
    
    private Boolean locked = false;
    private Boolean enabled =false;
    
//    @OneToOne(cascade = CascadeType.ALL)
//    private Accounts account;
    
//    @OneToMany(targetEntity= Accounts.class, cascade = CascadeType.ALL)
//    @JoinColumn(name ="ua_fk",referencedColumnName ="id")
    
    @OneToMany(mappedBy = "appuser",cascade =CascadeType.ALL)
    private List <Accounts> account = new ArrayList<>();
    

    public AppUser(String firstName, String lastName, String password, String email, AppUserRole appUserRole) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.password = password;
        this.email = email;
        this.appUserRole = appUserRole;
       // this.account = account;
      
    }
            
    
    
    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        SimpleGrantedAuthority authority = new SimpleGrantedAuthority(appUserRole.name());
        return Collections.singletonList(authority);
    }

    @Override
    public String getPassword() {
          return password;
    }
    
    
    public String getFirstName() {
          return firstName;
    }
    
    public String getLastName() {
          return lastName;
    }
    
    @Override
    public String getUsername() {
        return email;
    }

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return !locked;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return enabled;
    }

    @Override
    public String toString() {
        return "AppUser{" + "firstName=" + firstName + ", lastName=" + lastName + ", password=" + password + ", email=" + email + '}';
    }
  
    //we need to retrieve this for userdetails principal
     public double getBalance(int id) {
          return account.get(id).getBalance();
  
    }
     
     //we need to retrieve this for userdetails principal
     public void setBalance(double balance,int id) {
          account.get(id).setBalance(balance);
    }
 
    public void addAccount(double balance,double overdraft){
        this.account.add(new Accounts(balance,overdraft,this));
    }
    
}
